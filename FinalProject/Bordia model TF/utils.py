# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fl8i7U5JsdDlI6gkB6kEd9F04XHQihkQ
"""

import tensorflow as tf


def repackage_hidden(h):
    """Wraps hidden states in new Tensors,
    to detach them from their history."""
    if isinstance(h, tf.Tensor):
        #exchanged pytorch function detach() with tensorflow function stop_gradient()
        #not sure if they do exactly the same but tensor should be returned as is and stops gradient computation
        #detach creates a new tensor here and I am not sure if stop_gradient does the same
        return h.stop_gradient()
    else:
        #if h is not a tensor, call function recursively on every element in h
        return tuple(repackage_hidden(v) for v in h)


def batchify(data, bsz, args):
    # Work out how cleanly we can divide the dataset into bsz parts.
    nbatch = data.size(0) // bsz
    # Trim off any extra elements that wouldn't cleanly fit (remainders).
    data = data.narrow(0, 0, nbatch * bsz)
    # Evenly divide the data across the bsz batches.
    data = data.view(bsz, -1).t().contiguous()
    #if args.cuda:
        #data = data.cuda() -> in tf there are no cuda tensors. I think we can just leave it out here and specify elsewhere that the device used for all operations should be the GPU
    return data


def get_batch(source, i, args, seq_len=None, evaluation=False):
    seq_len = min(seq_len if seq_len else args.bptt, len(source) - 1 - i)
    data = source[i:i+seq_len]
    target = source[i+1:i+1+seq_len].view(-1)
    return data, target