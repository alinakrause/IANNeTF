# -*- coding: utf-8 -*-
"""generate

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-rW7OO69MzuT8tBxKIyPiKxeBCpJ3Cu
"""

###############################################################################
# Language Modeling on Penn Tree Bank
#
# This file generates new sentences sampled from the language model
#
###############################################################################

import argparse

#import torch
#from torch.autograd import Variable

import tensorflow as tf

import data

parser = argparse.ArgumentParser(description='PyTorch PTB Language Model')

# Model parameters.
parser.add_argument('--data', type=str, default='/scratch/sb6416/experiments/data/penn',
                    help='location of the data corpus')
parser.add_argument('--model', type=str, default='LSTM',
                    help='type of recurrent net (LSTM, QRNN)')
parser.add_argument('--checkpoint', type=str, default='./model.pt',   #have to adjust default here to tensorflow file (i think it should be a .hdf5 file)
                    help='model checkpoint to use')                   #eventuell brauchen wir sp√§ter tf.keras.callbacks.ModelCheckpoint um die Checkpoints zu speichern
parser.add_argument('--outf', type=str, default='generated.txt',      #file were generated text is saved
                    help='output file for generated text')
parser.add_argument('--words', type=int, default='1000',
                    help='number of words to generate')
parser.add_argument('--seed', type=int, default=1111,
                    help='random seed')
parser.add_argument('--cuda', action='store_true',
                    help='use CUDA')
parser.add_argument('--temperature', type=float, default=1.0,
                    help='temperature - higher will increase diversity')
parser.add_argument('--log-interval', type=int, default=100,
                    help='reporting interval')
args = parser.parse_args()

# Set the random seed manually for reproducibility.

#set 4000 seeds
for j in range(4000):
    #torch.manual_seed(j+500)
    tf.random.set_seed(j+500)
    """if torch.cuda.is_available():
        if not args.cuda:
            print("WARNING: You have a CUDA device, so you should probably run with --cuda")
        else:
            torch.cuda.manual_seed(args.seed)
    """
    #check if temperature is high enough
    if args.temperature < 1e-3:
        parser.error("--temperature has to be greater or equal 1e-3")

    #load model through checkpoint parameter
    with open(args.checkpoint, 'rb') as f:
        model, _, _ = torch.load(f,map_location=lambda storage, loc: storage)
    model.eval()
    
    
    if args.model == 'QRNN':
        model.reset()
    
    #determine where model is run (GPU)
    """
    if args.cuda:
        model.cuda()
    else:
        model.cpu()
    """

    #load data
    corpus = data.Corpus(args.data)
    #determine length of dictionary
    ntokens = len(corpus.dictionary)
    #get hidden states of the model
    hidden = model.init_hidden(1)
    
    input = Variable(tf.random.uniform(1).mul(ntokens), volatile=True) #I think .long can be removed since ints and longs were unified
    #input = Variable(torch.rand(1, 1).mul(ntokens).long(), volatile=True)
    
    """if args.cuda:
        input.data = input.data.cuda()
    """

    #open output file to save generated text
    with open(args.outf, 'a') as outf:
        outf.write(' ')
        #generate output for number of words
        for i in range(args.words):
            #save output and hidden state for randomly created input
            output, hidden = model(input, hidden)
            assert len(output)!=400
            #?
            word_weights = output.squeeze().data.div(args.temperature).exp().cpu()
            #using the weights create word indices with a multinomial distribution
            word_idx = tf.multinomial(word_weights, 1)[0]
            
            input.data.fill_(word_idx)
            
            #get word that corresponds to generated index
            word = corpus.dictionary.idx2word[word_idx]

            #write generated word in file and insert line break if it is the 19th word in the row
            outf.write(word + ('\n' if i % 20 == 19 else ' '))

            #write progress in command line
            if i % args.log_interval == 0:
                print('| Generated {}/{} words'.format(i, args.words))